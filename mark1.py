""""

# Time management
# Εισαγωγή tkinter
Το κανω exe:
pyinstaller main.py --onefile -w(για να μην εχει το terminal οταν εχω gui)

# Μενού εισαγωγής
    # 1 Συνάρτηση: Εισαγωγή
        # α) Υποχρεώσεις ή β) Δραστηριότητες
        # Διάρκεια δραστηριότητας , δεν μπορεί να υπερβαίνει τον συνολικό ελεύθερο χρόνο (<= Ελεύθερος χρόνος) , τις 168 ώρες της εβδομάδας και να είναι αρνητική ή χαρακτήρας.
        # Βαθμός σημαντικότητας (1-10)
        # Συνολικός ελεύθερος χρόνος μέσα στην εβδομάδα, η εβδομάδα έχει 168 ώρες (<=168)

    # 2 Συνάρτηση: Εμφάνιση όλων των δραστηριοτήτων


    # 3 Συνάρτηση: Τροποποίηση
        # Αλλαγή διάρκειας δραστηριότητας
        # Αλλαγή βαθμού σημαντικότητας
        # ΑΝ υπάρξει τροποίηση στην διάρκεια τότε 
            # Έλεγχος επάρκειας συνολικού ελεύθερου χρόνου
            # Επανυπολογισμός του συνολικού ελεύθερου χρόνου



    # 4 Συνάρτηση: Διαγραφή
        # Επιλογή δραστηριότητας προς διαγραφή 
        # Αν υπάρχει:
            # Διαγραφή και επανυπολογισμός του συνολικού ελεύθερου χρόνου.


    # 5 Συνάρτηση: Έξοδος
        # Αν επιλογή  = 4 τότε: Έξοδος.

# Έξοδος

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ΙΔΕΕΣ:
1)  Θα μπορούσαμε να διαχωρίζουμε σε λίστες τις υποχρεώσεις και τα χόμπι -----------------------------------------------------------------------------> Έγινε στις 21/03/2025.
2)  Η συνάρτηση modify() τερματίζει κάθε φορά που αλλάζω κάτι πχ το όνομα της δραστηριότητας, και επιστρέφει στο κεντρικό μενού.
    Το κρατάμε έτσι ή αφήνουμε τον χρήστη να επιλέγει ξανά και ξανά τις αλλαγές στην εκάστοτε δραστηριότητα μεχρι να πατήσει 4 για έξοδο;

    


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ΑΠΟΡΙΕΣ:
1)  Στην συνάρτηση modify(): #if any(activity["Δραστηριότητα"] == choice for activity in activities): Αυτο είναι λάθος, για κάποιο λόγο δεν "βλέπει" την πρώτη αποθηκευμένη δραστηριοτητα. Γιατί;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ΠΑΡΑΔΟΧΕΣ:
1) Εφικτές δραστηριότητες είναι όσες ανοίκουν στις λίστες activities, ypoxrewseis, hobby.




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ΗΜΕΡΟΛΟΓΙΟ                                                             ΡΟΗ ΕΡΓΑΣΙΩΝ - ΑΛΛΑΓΩΝ      &       ΠΡΟΓΡΑΜΜΑΤΙΣΜΟΣ ΜΕΛΛΟΝΤΙΚΩΝ ΕΡΓΑΣΙΩΝ                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TODO: Συναρτήσεις για εισαγωγές , Επιπλέον επιλογή στο κεντρικό μενού γιά προβολή του διαθέσιμου χρόνου

20/03/2025:
- Προσθήκη παραμέτρου x στην epilogi() για κλήση με μεταβλητό άνω όριο
- Προσθήκη της terminate, ελέγχει αν ο συνολικός ελεύθερος χρόνος μηδενίζεται συνέπεια των διαδοχικών αφαιρέσεων απο τις εισαγωγές δραστηριοτήτων. Αν terminate = True τότε δεν μπορώ να μπώ στην διαδικασία εισαγωγής νέας συνάρτησης.
- Προσθήκη συναρτήσεων για:
    1) Εισαγωγή ονόματος name()
    2) Εισαγωγή ελεύθερου χρόνου eleutheros_xronos().
    3) Προβολή του ελεύθερου χρόνου display_FreeTime().
    4) Εισαγωγή βαθμού σημαντικότητας importance().
    5) Εισαγωγή διάρκειας duration(), ταυτόχρονα επαναπροσδιορίζει τον ελεύθερο χρόνο.
- Αφαίρεση επιλογής για υποχρέωση ή χόμπι (έγιναν σχόλια σε περίπτωση που τα χρησιμοποιήσουμε τελικά)                                                   !!!!!!
- Προσθήκη επιλογής απο το κεντρικό μενου για:
    1) Προβολή διαθέσιμου χρονου.
    2) Απευθείας εισαγωγή ελεύθερου χρόνου χωρίς να χρειάζεται εισαγωγή ολόκληρης δραστηριότητας.

- TODO: Συνάρτηση modify | 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21/03/2025:
- BUG (διορθώθηκε) ΑΠΟΡΙΑ στην συνάρτηση modify():                                                                                                      !!!!!!
    #if any(activity["Δραστηριότητα"] == choice for activity in activities): Αυτο είναι λάθος, για κάποιο λόγο δεν "βλέπει" την πρώτη αποθηκευμένη δραστηριοτητα. Γιατί;
- ΟΛΟΚΛΗΡΩΘΗΚΑΝ στην συνάρτηση modify():
    1) Τροποποίηση του ονόματος της δραστηριότητας που επιλέγει ο χρήστης
    2) Τροποποίηση της διάρκειας της δραστηριότητας που επιλέγει ο χρήστης και ενημέρωση του συνολικού διαθέσιμου χρόνου:
        Στον χρόνο προστίθεται πρώτα η τρέχουσα διάρκεια της επιλεγμένης δραστηριότητας έτσι ώστε να επαναφερθεί κατάλληλα.
        και ΜΕΤΑ αφαιρείται η νέα διάρκεια μέσω της duration με κατάλληλο έλεγχο με βάση τον διαθέσιμο χρόνο.
    3) Τροποποίηση του βαθμού σημαντικότητας της δραστηριότητας που επιλέγει ο χρήστης.
    4) Λειτουργία εξόδου απο το μενου τροποποίησης της modify() | έξοδος απο την modify().
- ΠΡΟΣΤΕΘΗΚΑΝ:
    1) Συναρτήσεις display_ypoxrewseis & display_hobby() για την εμφάνιση όλων των υποχρεώσεων ή χόμπι αντιστοίχως.
    2) Λειτουργία επιλογής για υποχρέωση ή χόμπι κατά την εισαγωγή δραστηριότητας και αποθήκευση σε αντίστοιχα dictionaries.
    3) Δημιουργία λίστας για τα dict των υποχρεώσεων και των χόμπι.
- ΤΡΟΠΟΠΟΙΗΘΗΚΑΝ:
    1) Το κεντρικό μενου με επιλογές 7 και 8 για επιλογή εμφάνισης υποχρεώσεων ή χόμπι.
    2) Η κλησή της epilogi(x) με x=9 για το νέο μενού.
    
-TODO:  Ταξινόμηση με βάση την σημαντικότητα(φθίνουσα)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23/03/2025:
-ΔΙΟΡΘΩΘΗΚΑΝ:
    1)  BUG Κατά την εισαγωγή νέας δραστηριότητας με όνομα ίδιο με κάποια υπάρχουσα, τερμάτιζε η συνάρτηση add και επέστρεφε NONE οπότε στην main() 1 είχα TypeError.
        Πλέον χρησιμοποιώ while true ζητώντας απο τον χρήστη να επανεισάγει το όνομα της νέας συνάρτησης σε περίπτωση που εισάγει ξανά κάποιο υπάρχον.
-ΤΡΟΠΟΠΟΙΗΘΗΚΑΝ:
    1)  Αν ο χρήστης επιλέξει να προσθέσει περισσότερο νέο χρόνο τότε απο τον νέο χρόνο που πρόσθεσε αφαιρούνται οι ώρες που απαιτούνται για τις ήδη υπάρχουσες δραστηριότητες.
-ΠΡΟΣΤΕΘΗΚΕ:
    1)  delete_activity()

TODO:
1) display εφικτές δραστηριότητες. Εφικτές είναι αυτές που είναι εντός των 168 ωρών. Ανέφικτες όσες total_hours + duration > 168. 
2) Αυτό σημαίνει ότι κάθε "αποτυχημένη" εισαγωγή θα κρατείται σε νέα λίστα.
3) Μέσος χρόνος υποχρεώσεων και ελευθέρου χρόνου.
4) Εγγραφή σε αρχεία.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
01/04/2025:
-ΠΑΡΑΔΟΧΗ: Πρέπει να δίνεται προτεραιότητα στις υποχρεώσεις με βάση την σημαντικότητά τους και μετά στις ελεύθερου χρόνου.
-ΟΛΟΚΛΗΡΩΘΗΚΑΝ:
    1) Συνάρτηση υπολογίσμού μέσων χρόνων.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
05/04/2025:
-ΟΛΟΚΛΗΡΩΘΗΚΑΝ:
    1) Συναρτήσεις load & save activities from csv για κατάλληλη διαχείρηση αποθηκευμένων δραστηριοτήτων.
    2) Προσθήκη στην load from csv ούτως ώστε να ενημερώνονται και οι λίστες ypoxrewseis & hobby.


TODO:
1) Εισαγωγή matplotlib
2) Tkinter







"""
import csv


# Αρχικοποιήσεις
weekly_hours = 168 # H εβδομάδα έχει 168 ώρες -> Αν αλλάξει ποτέ εμείς μάλλον δεν θα είμαστε εδώ!
total_hours = 0  # Συνολικές ελεύθερες ώρες
total_ypoxrewseis = 0 # Συνολικός χρόνος που απαιτείται για υποχρεώσεις
total_hobby = 0 # Συνολικός χρόνος που απαιτείται για χόμπι
total_activities = 0 # Συνολικός χρόνος που απαιτείται για όλες τις δραστηριότητες

# Λίστες απο dictionaries για κάθε τύπο δραστηριότητας (εφικτές δραστηριότητες)
activities = []
ypoxrewseis = []
hobby = []




# Μενού
def display_menu():
    print("\n","-" * 10 , "Time Management" , "-" * 10 , "\n")
    print("1. Εισαγωγή νέας δραστηριότητας")
    print("2. Εμφάνιση όλων των δραστηριοτήτων")
    print("3. Τροποποίηση δραστηριοτήτων")
    print("4. Διαγραφη δραστηριότητας")
    print("5. Εμφάνιση διαθέσιμου ελεύθερου χρόνου")
    print("6. Προσθήκη διαθέσιμου ελεύθερου χρόνου")
    print("7. Εμφάνιση υποχρεώσεων")
    print("8. Εμφάνιση δραστηριοτήτων ελεύθερου χρόνου")
    print("9. Έξοδος")

# Eπιλογή λειτουργίας
def epilogi(x):
    while True:
        try:
            epilogi = input("Επέλεξε μια απο τις παραπάνω λειτουργείες: ").strip()
            epilogi = int(epilogi)
            if 1<= epilogi <= x:
                return epilogi
                break
            else:
                print ("Mή έγκυρη τιμή.")
        except ValueError:
            print ("Mή έγκυρη τιμή.")

# Συνάρτηση εισαγωγής ονόματος
def name():
    """Εισάγει / τροποποιεί το όνομα της δραστηριότητας"""

    # Εισαγωγή ονόματος, αφαιρώ τα κενά space πρίν και μετά το όνομα. 
    onoma = input("Δώστε το όνομα της δραστηριότητας: ").strip()
            
    """"
        Έλεγχος ονόματος, αν δωθεί το κενό τότε το διαγράφω με την strip επομένως onoma = False και μπαίνω στην επανάληψη
        ή αν κανένα απο τα στοιχεία του ονόματος δεν είναι χαρακτήρας.
    """
    while not onoma or not any(char.isalpha() for char in onoma):
        onoma = input("Το όνομα της δραστηριότητας δεν μπορεί να είναι κενό ή αριθμός, παρακαλώ επανεισάγετε το όνομα: ").strip()
    return onoma

# Εισαγωγή συνολικού ελεύθερου χρόνου
def eleutheros_xronos(total_activities):
    """ 
        Εισάγει τον ελεύθερο χρόνο. Αν ο χρήστης επιλέξει να προσθέσει περισσότερο νέο χρόνο τότε:
        απο τον νέο χρόνο που πρόσθεσε αφαιρούνται οι ώρες που απαιτούνται για τις ήδη υπάρχουσες δραστηριότητες.
    """
    while True:
        try:
            total_hours = input("Παρακαλώ εισάγετε τις συνολικές ώρες που έχετε διαθέσιμες για αυτήν την εβδομάδα: ").strip()
            total_hours = float(total_hours)
            
            if total_hours and 0 <= total_hours <= 168 and total_hours >= total_activities:
                total_hours -= total_activities
                if activities:
                    print(f"\nΑφαιρέθηκαν {total_activities} ώρες από τον νέο συνολικό σας χροόνο για τις ήδη υπάρχουσες δραστηριότητές σας.")
                    print(f"\nΟ νέος συνολικός ελεύθερος χρόνος σας είναι: {total_hours}.")
                return total_hours
            else:
                if total_activities > total_hours:
                    print(f"\nΕισάγετε παραπάνω ώρες! Απαιτούνται {total_activities} ώρες για τις ήδη υπάρχουσες δραστηριότητές σας.")
                else:
                    print("Οι συνολικές διαθέσιμές ώρες δεν μπορούν να είναι αρνητικός αριθμός ή περισσότερες από τις 168 ώρες της εβδομάδας.")
                
        except ValueError:
            print ("Μή έγκυρη είσοδος. Παρακαλώ εισάγετε τον αριθμό των διαθέσιμων ωρών.")

# Εμφάνιση του συνολικού ελεύθερου χρόνου
def display_FreeTime(x,activities):
    """Προβάλει τον διαθέσιμο ελεύθερο χρόνο"""
    
    if x > 0:
        print("\nΟ συνολικός ελεύθερος χρόνος σας για αυτή την εβδομάδα είναι: ", x, "ώρες.")
    else:
        if not activities:
            print("\nΔεν έχετε εισάγει τον διαθέσιμο ελεύθερο χρόνο σας. Παρακαλώ πατήστε το 6 για προσθήκη ελεύθερου χρόνου.")
        else:
            print("\nΔεν έχετε διαθέσιμό ελεύθερο χρόνο, παρακαλώ τροποποιήστε ή διαγράψτε κάποια δραστηριότητα για να ελευθερώσετε χρόνο ή πατήστε 6 για να προσθέσετε ελεύθερο χρόνο")
            
# Συνάρτηση εισαγωγής διάρκειας δραστηριότητας
def duration(total_hours):
    
    # Εισαγωγή διάρκειας με έλεγχο ορθότητας (Δεν μπορεί να υπερβαίνει τον συνολικό ελεύθερο χρόνο, τις 168 ώρες της εβδομάδας και να είναι αρνητική ή χαρακτήρας).
    while True:
        try:
            diarkeia = input ("\nΔώστε την διάρκεια της δραστηριότητας σε ώρες: ").strip()
            diarkeia = float(diarkeia)
            if diarkeia and 0 < diarkeia <= total_hours:
                total_hours -= diarkeia
                return diarkeia, total_hours
            else:
                if diarkeia + total_hours > weekly_hours:
                    print(f"")
                print(f"\nΗ διάρκεια πρέπει να είναι θετικός αριθμός και δεν μπορεί να ξεπερνάει τις {total_hours} διαθέσιμες ώρες ή τις 168 ώρες της εβδομάδας.")
        except ValueError:
            print("\nΜή έγκυρη είσοδος, παρακαλώ εισάγετε έναν αριθμό ωρών.")

# Συνάρτηση εισαγωγής βαθμού σημαντικότητας
def importance():
    while True:
        try:    
            grade = input("Δώστε τον βαθμό σημαντικότητας (1-10): ").strip()
            grade = int(grade)
            if grade and 1 <= grade <= 10:
                return grade
            else:
                print("Παρακαλώ δώστε έναν βαθμό απο το 1 εώς το 10.")
        except ValueError:
            print("Μή έγκυρη τιμή.")

# Προσθήκη δραστηριότητας
def add_activity(total_hours , activities):
    
    """ Εισάγει νέα δραστηριότητα ελέγχοντας πρώτα αν δεν έχει μηδενιστεί ο ελεύθερος χρόνος (μέσω της terminate).
        Καλεί τις συναρτήσεις εισαγωγής: 
        name() για: όνομα, 
        duration() για: διάρκεια, 
        eleutheros_xronos() για: ελεύθερο χρόνο(αν δεν έχει γίνει εισαγωγή ελεύθερου χρόνου πιο πριν),
        importance() για: βαθμό σημαντικότητας.
        Στην συνέχεια δημιουργεί dictionary για κάθε δραστηριότητα και το αποθηκεύει στην λίστα activities.
    """
    
    global terminate, total_ypoxrewseis, total_hobby, total_activities
    
    if total_hours > 0 and activities:
        terminate=False

    if terminate == False: # Αν έχω διαθέσιμο ελεύθερο χρόνο μπορώ να εισάγω νέα δραστηριότητα
        while True:
        
        #Eπιλογή τύπου δραστηριότητας, 1 για Υποχρέωση ή 2 για Χόμπι.
            while True:
                try:
                    choice = int(input(("Πληκτρολογείστε 1 για Υποχρέωση ή 2 για Χόμπι: ")))
                    if choice in [1,2]:
                        if choice == 1:
                            type = "Υποχρέωση"
                        else:
                            type = "Χόμπι"
                        break
                    print("Η επιλογή δεν υπάρχει. Παρακαλώ προσπαθήστε ξανά.")
                except ValueError:
                    print("Μη έγκυρη είσοδος.")
                    
        
            
                

            #onoma = name()
            while True:
                onoma = name()
                if any(activity["Δραστηριότητα"] == onoma for activity in activities):
                    print("\nΗ δραστηριότητα υπάρχει ήδη.")
                else:
                    break
            
        #Εισαγωγή διάρκειας δραστηριότητας

            # αν οι συνολικές διαθέσιμες ώρες είναι 0 , εισαγωγή των ωρών πρώτα
            if total_hours == 0:
                total_hours = eleutheros_xronos(total_activities)
           
            #Εισαγωγή διάρκειας δραστηριότητας
            diarkeia, total_hours = duration(total_hours) # Δέχεται το total_hours για τον εκ νέου υπολογισμό του και το στέλνει πίσω μαζί με την diarkeia με το return 
            total_activities += diarkeia # Υπολογισμός του συνολικού χρόνου που απαιτείται για όλες τις δραστηριότητες.
        
        # Eισαγωγή σημαντικότητας
            grade = importance()
        
        
        # Αν μηδενίστηκαν οι ώρες με την είσοδο της τελευταίας δραστηριότητας:
            if total_hours == 0: # Αν μηδενιστούν οι ελεύθερες ώρες τότε το terminate γινεταί True και δεν αφήνει να μπούμε εκ νέου στην λειτουργία προσθήκης δραστηριότητας
                    print("\nΜε την προσθήκη αυτής της δραστηριότητας έχει εξαντληθεί ο διαθέσιμος ελεύθερος χρόνος σας!")
                    terminate = True 
        
        
        # Εισαγωγή του στοιχείου στην λίστα με τα dictionaries
            # Αποθήκευση ως dictionary με όνομα activity
            activity = {
                "Δραστηριότητα" : onoma,
                "Διάρκεια" : diarkeia,
                "Σημαντικότητα" : grade,
                "Τύπος" : type
            }
            
            # Αν η επιλογή είναι 1 τότε προσθέτω την δραστηριότητα και στην λίστα με τις υποχρεώσεις.
            if choice == 1:
                ypoxrewseis.append(activity)
                total_ypoxrewseis += diarkeia # Υπολογισμός του συνολικού χρόνου που απαιτείται για τις υποχρεώσεις.
            else: # Αν η επιλογή είναι 2 τότε προσθέτω την δραστηριότητα και στην λίστα με τα χόμπι.
                hobby.append(activity)
                total_hobby += diarkeia # Υπολογισμός του συνολικού χρόνου που απαιτείται για τα χόμπι.
            
            
            # Προσθήκη του dictionary στην λίστα 
            activities.append(activity)
            #save_activities_to_csv()
            return total_hours, total_hobby, total_ypoxrewseis, total_activities
    else:
        print("\nΔεν έχετε διαθέσιμό ελεύθερο χρόνο, παρακαλώ τροποποιήστε ή διαγράψτε κάποια δραστηριότητα ή επιλέξτε να προσθέσετε ελεύθερο χρόνο")   
        return total_hours , total_hobby, total_ypoxrewseis, total_activities #BUG!
    
    """Άν μπεί με 0 για πρώτη φορά τότε τρέχει κανονικά την loop αφου το terminate εχει αρχικοποιηθεί σε False. Όμως το terminate γίνεται True.
        Αν μπεί για 2η συνεχόμενη φορά με 0 μέσω της επιλογής 1 απο το μενού τότε δεν επέστρεφε καμιά τιμή"""

# Εμφάνιση όλων των αποθηκευμένων δραστηριοτήτων
def display_activities(activities):
    """Προβάλει τις αποθηκευμένες δραστηριότητες ή αν δεν υπάρχουν, ενημερώνει με κατάλληλο μήνυμα."""
    if not activities:
        print("\nΔεν βρέθηκαν δραστηριότητες.\n")
    else:
        print("\nΟι δραστηριότητες που έχετε να κάνετε αυτή την εβδομάδα είναι: \n")
        for drastiriotita in activities:
            print (f"{drastiriotita['Δραστηριότητα']} : Διάρκεια: {drastiriotita['Διάρκεια']} ώρες | Βαθμός σημαντικότητας: {drastiriotita['Σημαντικότητα']} | Τύπος: {drastiriotita['Τύπος']}")

# Εμφάνιση όλων των αποθηκευμένων υποχρεώσεων
def display_ypoxrewseis(ypoxrewseis, total_ypoxrewseis):
    """Προβάλει τις αποθηκευμένες υποχρεώσεις ή αν δεν υπάρχουν, ενημερώνει με κατάλληλο μήνυμα."""
    if not ypoxrewseis:
        print("\nΔεν βρέθηκαν υποχρεώσεις.\n")
    else:
        print("\nΟι υποχρεώσεις σας αυτή την εβδομάδα είναι: \n")
        for drastiriotita in ypoxrewseis:
            print (f"{drastiriotita['Δραστηριότητα']} : Διάρκεια: {drastiriotita['Διάρκεια']} ώρες | Βαθμός σημαντικότητας: {drastiriotita['Σημαντικότητα']}")
        print("\nO συνολικός χρόνος που απαιτείται για υποχρεώσεις αυτή  την εβδομάδα είναι: ", total_ypoxrewseis," ώρες")
        mesos_xronos(x="Υποχρεώσεις")

# Εμφάνιση όλων των αποθηκευμένων χόμπι
def display_hobby(hobby, total_hobby):
    """Προβάλει τις αποθηκευμένες δραστηριότητες ελεύθερου χρόνου ή αν δεν υπάρχουν, ενημερώνει με κατάλληλο μήνυμα."""
    if not hobby:
        print("\nΔεν βρέθηκαν δραστηριότητες ελεύθερου χρόνου.\n")
    else:
        print("\nΤα χόμπι σας αυτή την εβδομάδα είναι: \n")
        for drastiriotita in hobby:
            print (f"{drastiriotita['Δραστηριότητα']} : Διάρκεια: {drastiriotita['Διάρκεια']} ώρες | Βαθμός σημαντικότητας: {drastiriotita['Σημαντικότητα']}")
        print("\nO συνολικός χρόνος που απαιτείται για χόμπι αυτή  την εβδομάδα είναι: ", total_hobby," ώρες")
        mesos_xronos(x="Χόμπι")

# Τροποποίηση
def modify(activities, total_hobby, total_ypoxrewseis):
    """
        Αν δεν έχουν καταχωρηθεί δραστηριότητες η συνάρτηση εμφανίζει κατάλληλο μήνυμα και τερματίζει. Αν υπάρχουν δραστηριότητες τοτε τις εμφανίζει
        και καλεί ένα μενού επιλογών τροποποίησης. Ο χρήστης επιλέγει μια δυνατότητα με βάση το μενού. Κάθε φορά που πραγματοποιείται μια αλλαγή 
        ενημερώνεται η λίστα των δραστηριοτήτων και η συνάρτηση κλείνει και επιστρέφω στο κεντρικό μενού.
    """
    global total_hours
    if not activities:
        print ("\nΔεν υπάρχουν δραστηριότητες για τροποποίηση.")
        return
    
    # Εμφάνιση και επιλογή διαθέσιμων δραστηριοτήτων
    print ("\nΕπιλέξτε μία απο τις διαθέσιμες δραστηριότητες για τροποποίηση: \n")
    for activity in activities:
        print (f"{activity['Δραστηριότητα']}")
    
    # Έξωτερικός βρόγχος 
    while True:
        
        # Επιλογή του χρήστη 
        choice = input().strip()

          
        for activity in activities:
            
            # Αν η επιλογή του χρήστη υπάρχει τότε μπορεί να την τροποποιήσει, αλλίως ενημέρωση ότι η εισαγωγή του δεν υπάρχει
            if activity["Δραστηριότητα"] == choice:  #if any(activity["Δραστηριότητα"] == choice for activity in activities): Αυτο είναι λάθος, για κάποιο λόγο δεν "βλέπει" την πρώτη αποθηκευμένη δραστηριοτητα. Γιατί;
                
                # Μενού επιλογών τροποποίησης
                print("\nΔυνατότητες τροποποίησης: \n")
                print("1. Τροποποίηση ονόματος δραστηριότητας")
                print("2. Τροποποίηση διάρκειας δραστηριότητας")
                print("3. Τροποποίηση βαθμού σημαντικότητας δραστηριότητας")
                print("4. Ακύρωση\n")
                
                
                dynatotita = epilogi(x=4)
                
                if dynatotita == 1:
                    while True:
                        onoma = name()
                        if any(activity["Δραστηριότητα"] == onoma for activity in activities):
                            print("\nΗ δραστηριότητα υπάρχει ήδη. Παρακαλώ εισάγετε διαφορετικό όνομα δραστηριότητας.")
                            #return  total_hours, total_hobby, total_ypoxrewseis
                        else:
                            # Aν η δραστηριότητα που θέλω να αλλάξω είναι Υποχρέωση τότε αλλάζω το όνομα της και στην λίστα ypoxrewseis()
                            if activity["Τύπος"] == "Υποχρέωση":
                                for ypoxrewsi in ypoxrewseis:
                                    if activity["Δραστηριότητα"] == ypoxrewsi["Δραστηριότητα"]:
                                        ypoxrewsi["Δραστηριότητα"] = onoma
                            else: # Aν η δραστηριότητα που θέλω να αλλάξω είναι χόμπι τότε αλλάζω το όνομα της και στην λίστα hobby()
                                for xompi in hobby:
                                    if activity["Δραστηριότητα"] == xompi["Δραστηριότητα"]:
                                        xompi["Δραστηριότητα"] = onoma


                            activity["Δραστηριότητα"] = onoma
                            print("\nΤο όνομα της δραστηριότητας άλλαξε σε: ", activity["Δραστηριότητα"])
                            
                            return total_hours, total_hobby, total_ypoxrewseis
                elif dynatotita == 2:
                    # Αλλάζει το total_hours προσθέτωντας πίσω την προηγούμενη διάρκεια
                    total_hours += activity["Διάρκεια"] 
                    print("\nΟι διαθέσιμες ώρες σας είναι: " , total_hours, "ώρες.")
                    # Κλήση της duration για εισαγωγή νέας διάρκειας και υπολογισμό του total_hours εκ νέου
                    diarkeia, total_hours = duration(total_hours)

                    # Aν η δραστηριότητα που θέλω να αλλάξω είναι Υποχρέωση τότε αλλάζω την Διάρκεια της και στην λίστα ypoxrewseis()
                    if activity["Τύπος"] == "Υποχρέωση":
                        for ypoxrewsi in ypoxrewseis:
                            if activity["Δραστηριότητα"] == ypoxrewsi["Δραστηριότητα"]:
                                
                                total_ypoxrewseis -= ypoxrewsi["Διάρκεια"]
                                
                                ypoxrewsi["Διάρκεια"] = diarkeia
                                
                                total_ypoxrewseis += ypoxrewsi["Διάρκεια"]
                            
                    else: # Aν η δραστηριότητα που θέλω να αλλάξω είναι χόμπι τότε αλλάζω την Διάρκεια της και στην λίστα hobby()
                        for xompi in hobby:
                            if activity["Δραστηριότητα"] == xompi["Δραστηριότητα"]:
                                total_hobby -= xompi["Διάρκεια"]
                                xompi["Διάρκεια"] = diarkeia
                                total_hobby += xompi["Διάρκεια"]
                    
                    # Καταχώρηση αλλαγής διάρκειας στο dict
                    activity["Διάρκεια"] = diarkeia
                    print(f'\nH διάρκεια της δραστηριότητας "{activity['Δραστηριότητα']}" άλλαξε σε: {activity['Διάρκεια']} ώρες.')
                    print("\nΟ νέος διαθέσιμος χρόνος είναι: ", total_hours)
                    return total_hours, total_hobby, total_ypoxrewseis
                elif dynatotita == 3:
                    activity["Σημαντικότητα"] = importance()
                    print(f'\nΟ βαθμός σημαντικότητας της δραστηριότητας "{activity["Δραστηριότητα"]}" άλλαξε σε {activity["Σημαντικότητα"]}')
                    return total_hours, total_hobby, total_ypoxrewseis
                else:
                    print ("\nΈξοδος απο το μενού τροποποίσης.")
                    return total_hours, total_hobby, total_ypoxrewseis
                    
            # Αν η επιλογή δεν είναι έγκυρη      
            else:
                print ("\nH δραστηριότητα που επιλέξατε δεν υπάρχει, παρακαλώ επιλέξτε μια από τις παρακάτω: \n")
                for activity in activities:
                    print (f"{activity['Δραστηριότητα']}")

# Ταξινόμηση 
def taksinomisi (x):
    activities.sort(key = lambda x: x["Σημαντικότητα"], reverse=True)
    save_activities_to_csv
    return activities
            
# Διαγραφή
def delete_activity(activities, total_ypoxrewseis, total_hobby, total_hours, total_activities, ypoxrewseis, hobby ):
    """
        Εμφάνιση όλων των δραστηριοτήτων μέσω της display_activities. Ο χρήστης επιλέγει κάποια, αν επιλέξει κάποια που δεν υπάρχει τότε εμφανίζεται κατάλληλο μήνυμα.
        Αν επιλέξει κάποια που υπάρχει τότε βρίσκει αν ειναι υποχρέωση ή χόμπι. Διαγράφει την δραστηριότητα απο την λίστα υποχρεώσεων ή χόμπι. Διαγράφει την δραστηριότητα
        απο την λιστα όλων των δραστηριοτήτων. Ο χρόνος της δραστηριότητας αφαιρείται απο τον συνολικό χρόνο δραστηριοτήτων και τον συνολικό χρόνο υποχρ. ή χόμπι και στο
        total_hours που είναι ο συνολικός διαθέσιμος ελεύθερος χρόνος, προστίθεται η διάρκεια της δραστηριότητας που διαγράφθηκε.
    """
    # Αν δεν έχουν καταχωρηθεί δραστηριότητες: κατάλληλο μήνυμα και επιστροφή στο main()
    if not activities:
        print ("\nΔεν υπάρχουν δραστηριότητες για διαγραφή.")
        return total_ypoxrewseis, total_hobby, total_hours, total_activities
    
    # Εμφάνιση και επιλογή διαθέσιμων δραστηριοτήτων
    print ("\nΕπιλέξτε μία απο τις διαθέσιμες δραστηριότητες για διαγραφή: \n")
    for activity in activities:
        print (f"{activity['Δραστηριότητα']}")

    
    while True:
        # Επιλογή του χρήστη 
        choice = input().strip()

          
        for activity in activities:
            
            # Αν η επιλογή του χρήστη υπάρχει τότε μπορεί να την διαγράψει, αλλίως ενημέρωση ότι η εισαγωγή του δεν υπάρχει
            if activity["Δραστηριότητα"] == choice:
                
                # Αν δόθηκε υπάρχουσα δραστηριότητα τότε κρατάω την διάρκειά της

                # Aν η δραστηριότητα που θέλω να διαγράψω είναι Υποχρέωση τότε την διαγράφω και από λίστα ypoxrewseis()
                if activity["Τύπος"] == "Υποχρέωση":
                    total_ypoxrewseis -= activity["Διάρκεια"]
                    for act in ypoxrewseis:
                        if act["Δραστηριότητα"] == choice:
                            ypoxrewseis.remove(act)
                    
                
                else: # Aν η δραστηριότητα που θέλω να διαγράψω είναι χόμπι τότε την διαγράφω και από λίστα hobby()
                    total_hobby -= activity["Διάρκεια"]
                    for act in hobby:
                        if act["Δραστηριότητα"] == choice:
                            hobby.remove(act)
                
                # Διαγραφή απο την λίστα όλων των δραστηριοτήτων
                total_hours += activity["Διάρκεια"]
                total_activities -= activity["Διάρκεια"]
                activities.remove(activity)
                print(f'\nΗ δραστηριότητα "{activity["Δραστηριότητα"]}" αφαιρέθηκε.')





            # Αν η επιλογή δεν είναι έγκυρη      
            else:
                print ("\nH δραστηριότητα που επιλέξατε δεν υπάρχει, παρακαλώ επιλέξτε μια από τις παρακάτω: \n")
                for activity in activities:
                    print (f"{activity['Δραστηριότητα']}")

        return total_ypoxrewseis, total_hobby, total_hours, total_activities
    
# Μέσος χρόνος
def mesos_xronos (x):
    if x== "Υποχρεώσεις":
        mesos_ypoxrewseis = total_ypoxrewseis / len(ypoxrewseis)
        print (f"\nΟ μέσος χρόνος υποχρεώσεων για αυτή την εβδομάδα είναι: {mesos_ypoxrewseis:.1f} ώρες.")
    else:
        mesos_hobby = total_hobby / len(hobby)
        print (f"\nΟ μέσος χρόνος δραστηριοτήτων ελευθέρου χρόνου για αυτή την εβδομάδα είναι: {mesos_hobby:.1f} ώρες.")
    return
    
# Αποθήκευση δραστηριοτήτων σε csv
def save_activities_to_csv(arxeio = "activities.csv"):
    with open (arxeio, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=["Δραστηριότητα","Διάρκεια","Σημαντικότητα","Τύπος"])
        writer.writeheader()
        writer.writerows(activities)
        

# Φόρτωση δραστηριοτήτων απο csv
def load_activities_from_csv(arxeio = "activities.csv"):
    global activities, total_activities, total_hobby,total_ypoxrewseis
    try:
        with open(arxeio, mode="r",newline="") as file:
            reader = csv.DictReader(file)
            for row in reader:
                # Φόρτωμα και διαχείρηση των δραστηριοτήτων στην λίστα activities με όλες τις δραστηριότητες.
                activities.append({"Δραστηριότητα" : row["Δραστηριότητα"], "Διάρκεια" : float(row["Διάρκεια"]), "Σημαντικότητα" : int(row["Σημαντικότητα"]), "Τύπος" : row["Τύπος"]})
                total_activities += float(row["Διάρκεια"])
                # Ενημέρωση λίστας υποχρεώσεων.
                if row["Τύπος"] == "Υποχρέωση":
                    ypoxrewseis.append({"Δραστηριότητα" : row["Δραστηριότητα"], "Διάρκεια" : float(row["Διάρκεια"]), "Σημαντικότητα" : int(row["Σημαντικότητα"]), "Τύπος" : row["Τύπος"]})
                    total_ypoxrewseis += float(row["Διάρκεια"])
                else: # Ενημέρωση hobby.
                    hobby.append({"Δραστηριότητα" : row["Δραστηριότητα"], "Διάρκεια" : float(row["Διάρκεια"]), "Σημαντικότητα" : int(row["Σημαντικότητα"]), "Τύπος" : row["Τύπος"]})
                    total_hobby += float(row["Διάρκεια"])
            #print(activities)

        return total_activities,total_ypoxrewseis,total_hobby
    except FileNotFoundError:
        print("Δημιουργία αρχείου νέου χρήστη.")
        activities = []
        

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Κυρίως πρόγραμμα
def main():
    global total_hours, terminate, total_hobby, total_ypoxrewseis, total_activities
    terminate = False
    load_activities_from_csv()
    
    while True:

        display_menu()
        leitourgia = epilogi(x=9)
        
        if leitourgia == 1:
            total_hours, total_hobby, total_ypoxrewseis, total_activities = add_activity(total_hours , activities)
            taksinomisi(activities)
            taksinomisi(ypoxrewseis)
            taksinomisi(hobby)
            save_activities_to_csv()
            
           
        elif leitourgia == 2:
            display_activities(activities) 
        
        elif leitourgia == 3:
            total_hours, total_hobby, total_ypoxrewseis = modify(activities,total_hobby, total_ypoxrewseis)
            taksinomisi(activities)
            taksinomisi(ypoxrewseis)
            taksinomisi(hobby)
            save_activities_to_csv()
        
        elif leitourgia == 4:
            total_ypoxrewseis, total_hobby, total_hours, total_activities = delete_activity(activities, total_ypoxrewseis, total_hobby, total_hours, total_activities, ypoxrewseis, hobby)
            save_activities_to_csv()
        elif leitourgia == 5:
            #if activities:
                display_FreeTime(total_hours,activities)
            #else:
                #print("\nΔεν έχετε εισάγει τον διαθέσιμο ελεύθερο χρόνο σας. Παρακαλώ πατήστε το 6 για προσθήκη ελεύθερου χρόνου.")
        
        elif leitourgia == 6:
            total_hours = eleutheros_xronos(total_activities)
        
        elif leitourgia == 7:
            display_ypoxrewseis(ypoxrewseis,total_ypoxrewseis)
        
        elif leitourgia == 8:
            display_hobby(hobby, total_hobby)
        
        else:
            print("\nΈξοδος απο το πρόγραμμα.\n")
            break

main()